<?xml version="1.0"?>
<ruleset name="Good Omens CS">
	<description>Good Omens Coding Standards.</description>

	<exclude-pattern>*/phpunit.xml*</exclude-pattern>
	<exclude-pattern>*/languages/*</exclude-pattern>
	<exclude-pattern>*/tests/*</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>

	<rule ref="WordPress-Extra" />

	<!-- Yoda conditions, we must ignore -->
	<rule ref="WordPress.PHP.YodaConditions.NotYoda">
		<severity>0</severity>
	</rule>
	<!-- Ignore lowercase filenames -->
	<rule ref="Generic.Files.LowercasedFilename.NotFound">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<severity>0</severity>
	</rule>


	<!-- Allow short echo -->
	<rule ref="Generic.PHP.DisallowShortOpenTag">
		<exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
	</rule>

	<!-- Allow class file names without the 'class-' prefix -->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="strict_class_file_names" value="false"/>
		</properties>
	</rule>
	<!-- Add extra word delimiter for hooks. -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="/"/>
		</properties>
	</rule>
	<!-- Allow ternary forms -->
	<rule ref="WordPress.PHP.DisallowShortTernary.Found">
		<severity>0</severity>
	</rule>
	<!-- Warn against using array() instead of [] -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax.Found">
		<type>warning</type>
	</rule>
	<!-- Prefer [] instead of array() -->
	<rule ref="Generic.Arrays.DisallowShortArraySyntax">
		<severity>0</severity>
	</rule>

	<!-- Include the FunctionCallSignature sniff so we can set some properties
		to enforce a single space after the opening parenthesis and before the
		closing parenthesis, like this: test( $var );

		But we only want two of the error codes from this sniff, no matter how
		it changes over time, so set the severity of the entire sniff to 0
		as this will exclude all message codes it produces. -->

	<rule ref="PEAR.Functions.FunctionCallSignature">
		<properties>
			<property name="requiredSpacesAfterOpen" value="1"/>
			<property name="requiredSpacesBeforeClose" value="1"/>
		</properties>
		<severity>0</severity>
	</rule>

	<!-- Now that we've excluded all message codes from FunctionCallSignature,
		re-enable the two codes that we actually want. This will change the severity
		of these codes from 0 (set by the above rule) to the default value (5). -->
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />

	<file>.</file>
	<arg name="extensions" value="php" />
	<arg name="encoding" value="UTF-8" />
	<config name="testVersion" value="7.0-"/>

</ruleset>